[ { "title": "js13k 2025 Post Mortem - html/css/js Game Jam", "url": "/posts/Js13k-2025-Post-Mortem/", "categories": "", "tags": "", "date": "2025-09-25 17:00:00 +0000", "snippet": " This write-up is a bit dense, and I owe an apology in advance for the length. It is a deep dive written over many revisions after much reflection. My entry raised many questions, and I wanted to ...", "content": " This write-up is a bit dense, and I owe an apology in advance for the length. It is a deep dive written over many revisions after much reflection. My entry raised many questions, and I wanted to give those questions the space they deserve.JS13k 2025 Post-Mortem: FlyktThis year I entered the JS13kGames 2025 competition with Flykt for the Black Cat theme. My game is a black-cat themed puzzle platformer. In 13 kB I packed a custom TypeScript game engine, physics, portal raycasting, a state-based animation system, procedural audio, text and graphics, and a compressed map system. On paper the technical goals were ambitious, and I met most of them. In practice, what mattered most was not the bytes I saved or the subsystems I built, but what happened once players actually played the game.A Contrast with Last YearThe contrast is sharper than I expected when set against my first entry, Z0MB13, submitted last year (2024). Built upon the LittleJS game engine, it was technically modest to the point of austerity: a looping map, a melee stick that upgraded into firearms, some basic Perlin noise, a particle system, and a shop that sold marginally better weapons. No custom engine, no procedural pipelines, no compression gymnastics. It was my first finished game, and its primary accomplishment was simply being complete.And yet Z0MB13 worked. Players grasped its premise in seconds, survived long enough to taste upgrades, and stayed for “one more run.” Its simplicity is what made it legible, and its upgrade loop gave players a reason to continue. Z0MB13 achieved almost nothing technically, but it held attention for the most part. This year my entry Flykt achieved far more technically, but often lost its players within the first few minutes. The divide between technical ambition and player engagement became the lens through which I came to see every mishandled decision.Concept and ThemeFor Flykt I set out to fuse two motifs: the jam’s theme, “black cat,” and portals as the foundation of a skill-based movement system. The cat would not walk in the ordinary sense. Every jump was aimed and released like a slingshot, chaining momentum through portals that clung only to black tiles. The mechanic was precise and the theme was grounded. Even the title, Flykt (Swedish for “Escape,” but also resonant with “flicked”) carried layered meaning across languages. From that seed, the game grew outward: the engine built to support expressive momentum, the art style pared down to highlighted silhouettes, the music and sound effects tuned for outward thinking. The level design became the crucible where all of this converged. Each 2D stage needed to demonstrate puzzle, rhythm and intent. In this way the game’s structure mirrored its theme: a search for escape through constraint. Early on the vision was clear and strong so the game quickly fell into place. I started playtesting levels early, setting the movement constants in stone. Early stage interpolated rendering before/afterBuilding the EngineI resisted heavy frameworks and wrote everything in raw TypeScript for quick prototyping, targeting Canvas 2D. The goal was not to recreate or clone any one thing, but rather to shape a toolset that would survive both inside and outside of the 13 kB coffin of the jam. Every line had to justify itself. Assets were collapsed into a single atlas, fonts distilled into base-36 strings, and all audio generated procedurally. Even the levels leaned on Unicode glyphs as cheap graphical textures for walls and floors. The pipeline was then driven hard through Vite, Terser, and finally Roadroller until the bundle slipped under the ceiling with only a handful of levels present. Spikes, polish, and sound effects came later, once the raw size was proven manageable. Early stage animation and tileset prototypeThat philosophy shaped every subsystem. Physics were stripped heavily, portals were a DDA loop and a velocity reflection, nothing more, yet they gave the impression of continuity and momentum far richer than the implementation suggested. Animation followed the same pattern. Rather than store dozens of separate sprites, I packed horizontal strips into the atlas and sliced them at runtime, calculating offsets so trimmed frames would never “pop.” The state machine that drove those frames was skeletal, just a dictionary of keys to frame ranges, but because frame timing was tied to player state and velocity, it looked alive.Every feature had to justify not only its play value but also its byte cost. The font system, for instance, was not an afterthought but a deliberate exercise in compression: each glyph distilled into a 35-bit integer, serialized as a seven-character base-36 string, then unpacked at draw time with a tight shifting loop. It felt closer to sleight of hand than actual engineering, saving hundreds of bytes, and Roadroller rewarded that regularity by squeezing it down even further. Levels passed through the same scrutiny. They began as plain JSON maps of block tiles right from the Tiled level editor, heavy but legible. Later they were transmuted into run-length-encoded base64 strings with a clever inflater. The savings were no joke at all, the space reclaimed was enough to squeeze plenty of levels into the final build.All of this thrift was in service of a kind of polish players could see. The parallax behind the cat worked. The portals worked well. The atmosphere felt richer than the codebase had any right to. Some people said as much, and those moments of recognition were gratifying. But polish cuts two ways. It invites admiration, but it also sharpens expectations. A player impressed by the presentation was also a player quick to notice when the tutorial refused to explain its logic, or when the controls ignored their preferred keys. The engine itself was a success: compact, coherent, purpose-built. However, the very smoothness of its sheen made every crack in usability shine brighter. In the end, what was gained in compression was sometimes lost in the unpolished edges that remained visible. Late stage portal and physics prototypeTeaching the Player: Failure and RepairThe first fracture appeared at the tutorial, or rather, the lack of one. I opened with a test when I should have opened with a lesson. The very first screen presumed a chain of four insights: identify the black tile beneath your feet, fire a portal into it, notice the matching tile across the gap, place the second portal, and deduce that entry required a jump. Four unspoken rules before the player was permitted a single success. Many stopped at the first spike and sensibly concluded the game had nothing to teach them. One of the main intended routes to solve level 1Onboarding works when mechanics are introduced one at a time. In Flykt I did the opposite. I assumed players would uncover the rules for themselves and then punished them when they failed. That was not very clever design. I made sure the levels were playtested well, just didn’t properly scale them by difficulty to introduce the mechanics gradually.The Director’s Cut rebuilds this from the ground up. Hints are present and are state-driven. Miss a grey wall and the game highlights the viable black surfaces. Land on spikes and a clear message explains what went wrong. Succeed and the hint dissolves. The first level is fairly easy: an open pair of black tiles to experiment with freely, then a single jump without advanced movement. The dialogue between player and game is constant but quiet, always responsive to the last attempt. Director’s Cut tutorial levelThis rebuilt tutorial became the blueprint for the Director’s Cut as a whole. It merges community feedback with the recognition that discovery must be invited, not demanded. It finally teaches before it tests, and it is the version I will stand behind once the jam is over.Input AssumptionsThe second fracture was controls. I built Flykt mainly around a WASD plus mouse scheme so natural to me I never thought to question it. The arrow keys were added almost as scaffolding, meant for minimal accommodation, not a full doorway.Players saw it differently. Many reached for the arrow keys first. For them, arrows were instinct. But in my code the arrows had been wired as an afterthought: they could move the cat, or they could aim the portals, but never both at once. Using them meant sacrificing half the control scheme. A player who expected to jump with arrows suddenly found the portal crosshair frozen. A player who tried to aim a portal discovered their movement inputs were swallowed. To them the game felt broken, not because the mechanic itself was flawed, but because the input model forced an impossible choice. Some called the game “unplayable,” not because the mechanic was flawed, but because my input model excluded them, or at the very least didn’t explain itself at all.The oversight was deeper still. Jam players could have used trackpad control. What felt precise on my end was punitive, even impossible on theirs. By assuming one hardware context, I inadvertently locked out several others. Accessibility cannot live in the margins. If an input path exists, players can and will take it, and it must be complete. By treating the arrows and trackpad as secondary, I left people excluded and frustrated. That was my mistake, not theirs.Community FeedbackThe responses reflected this divide. Several praised the music and atmosphere, then stalled at the very first gap. More than one assumed the portals were broken before realizing they bound only to black tiles. The real issue wasn’t their patience, it was my design. The opening demanded too many insights at once. My pre-jam testers had been colleagues who treated confusion as a puzzle to solve. The jam audience approached as players, sampling quickly and moving on. In a competition feed, the first ninety seconds decide whether a game earns another ninety. I had built the main hook as a problematic barrier instead of a warm welcome.The verdict on inputs was equally blunt. Mouse aim might feel crisp on a desktop, but it was punishing on a trackpad. Arrow-key players encountered partial support and concluded the game did not want them. They were correct. The comments simply described what happened on screen. That honesty was invaluable for moving the direction of the project forward into the Director’s Cut.Lessons Carried ForwardThe lessons are stark. Teach early, and teach explicitly as mechanics do not explain themselves. Do not assume which control scheme players will use. Design each as if it might be their first. Make the first level an invitation, not a filter. Treat accessibility not as an ornament but as a structure. These are obvious truths, but in the pursuit of compression tricks and systemic novelty I easily deprioritized them.Looking AheadThe post-jam Director’s Cut is my chance to address these concerns. Controls will be fully taught, not implied. The tutorial will unfold in sequence: placement, connection, traversal, before difficulty rises. Early levels will be playgrounds of discovery, not filters of endurance.The engine already exists. What remains is the part I neglected: player experience. Clarity, accessibility, pacing — these will take precedence over byte shaving. The jam taught me a hard but valuable truth: a technically dense entry can still fail if its audience cannot enter. JS13k may be measured in bytes, but at least for me its deeper measurement is perspective. I leave with sharper tools, clearer priorities, and renewed respect for the players who tried to meet my game on its terms.Closing ThoughtsI am deeply grateful to everyone who played Flykt, whether they failed to clear the first screen or pressed on to the final levels. Their reactions and insights reshaped my understanding of what this project truly was. What I received back was an education in design, communication, and technical restraint. The game ended up teaching me as much as I had hoped to teach its players.Looking back from my first entry Z0MB13 to this year’s Flykt reveals a clear arc. Z0MB13 was technically spare but immediately legible. Players always knew what they were chasing. Flykt inverted that balance: technically dense, but often obscure, and many players left because they could not see the thread that was meant to guide them forward. That contrast is humbling, but also clarifying.What I carry forward is not just the ambition of squeezing engines, features, audio systems, and procedural tricks into 13 kB, but the recognition that clarity must frame the challenge. Compression and technicality flourish only so far as they can help carry the player along. Next time, my focus will be on designing an experience where the technology amplifies accessibility, rather than hides it. Where ambition and approachability can share the same space.That is the loop I intend to close, and the immediate lessons Flykt and the js13k 2025 game jam left behind for me :) Thank you to the js13k team, community, and Andrzej for putting this jam together!" }, { "title": "Serufuhosuto-music-bot", "url": "/posts/self-hosted-music-bot/", "categories": "", "tags": "", "date": "2025-06-11 06:30:00 +0000", "snippet": "セルフホスト (Self Hosted) Music Bot 🎵A minimal, high-quality Discord music streaming bot — built for real-time, self-hosted control with near zero bloat.View the Source » About The Projectセルフホスト (Self...", "content": "セルフホスト (Self Hosted) Music Bot 🎵A minimal, high-quality Discord music streaming bot — built for real-time, self-hosted control with near zero bloat.View the Source » About The Projectセルフホスト (Self Hosted) Music Bot is a modern, sleek Java-based Discord bot built for high-quality music streaming using yt-dlp and ffmpeg. Built to solve the problem of overcomplicated and unreliable self-hosted discord music bots.✅ No tracking✅ No third-party APIs✅ Easy to fix when it inevitably breaks.⚙️ Built With ☕ Java 21 🎧 JDA 5 🧪 yt-dlp 🛠 FFmpeg 📦 Maven + Shade PluginPrerequisites Java 17+ ffmpeg installed (in your system path) yt-dlp installed and accessible# Example setup (Windows / Linux)choco install ffmpeg -y # or brew install ffmpegpip install yt-dlpInstallation⬇️ Download the latest .jar file:👉 Serufuhosuto-music-bot.jar📁 In the same folder where the Java executable is run, create a config.json:{ \"token\": \"YOUR_DISCORD_BOT_TOKEN\", \"prefix\": \".\", \"ffmpegPath\": \"ffmpeg\", \"ytQuality\": \"bestaudio[ext=m4a]\"}Run the bot:java -jar Serufuhosuto-music-bot-1.0.jarBuilding from SourceIf you want to modify:git clone https://github.com/JakeTurner616/Serufuhosuto-music-bot.gitcd Serufuhosuto-music-botmvn clean packageThe final JAR will be in the target/ folder.🎮 Usage🎧 .play &lt;url&gt; – stream or queue YouTube audio⏭ .skip – skip the current track⏩ .seek &lt;sec&gt; – jump to a time in the current track🧹 .clear – clear the queue🛑 .stop – stop all playback👋 .leave – disconnect the bot📜 LicenseDistributed under the GNU GPL v3.0 License. See the LICENSE file for more information." }, { "title": "YouTube TV Desktop w/ adblock", "url": "/posts/YouTubeTV-adblocking/", "categories": "", "tags": "", "date": "2025-06-11 06:30:00 +0000", "snippet": "YouTube TVSimple YouTube TV Client for desktop based on electron. You can connect a compatible device such as a phone or computer with Google Chrome and send videos to the app for viewing, just lik...", "content": "YouTube TVSimple YouTube TV Client for desktop based on electron. You can connect a compatible device such as a phone or computer with Google Chrome and send videos to the app for viewing, just like on ChromeCast or smart TVs with YouTube. Includes ad and telemetry blocking out of the box.It implements a DIAL server (based in SSDP) to allow connection from devices that use this same protocol (limited to YouTube in this application).Use the userAgent allowed by YouTube TV:Mozilla/5.0 (X11; Linux i686) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.77 Large Screen Safari/534.24 GoogleTV/092754It can use npm start or else npx electron . .If you already have electron installed globally, you can start the app with electron .📦 Builds with Ad and cross-site blockingThe project can be downloaded already built and ready to use for Windows. Build it yourself from source for Linux, MaxOS. Platform Architecture Link Windows x32/x64 Download Linux/MAC (source) x32/x64 Download 📦 Builds (without ad-blocking)The project can be downloaded already built and ready to use. Available for Linux, macOS and Windows. On x86, x84 and ARM architectures. Platform Architecture Link Windows x32/x64 Download Linux (Deb) x64 Download Linux (Deb) ARM64 Download Linux (Deb) ARMv7l Download Linux (RPM) x64 Download Linux (RPM) ARMv7l Download Linux (RPM) ARM64 Download macOS Intel (x64) Download macOs Apple Chip (ARM) Download All builds⌨️ Key shortcuts Max. resolution config panel: Ctrl + S Fullscreen: Ctrl + F. Developer Tools: Ctrl + D. Change cursor visibility: Ctrl + A." }, { "title": "Adonalsium Adjacency matrix web visualization", "url": "/posts/Adonalsium-data/", "categories": "", "tags": "", "date": "2025-06-11 06:30:00 +0000", "snippet": "Adonalsium is a project designed to map the intricate relationships within Brandon Sanderson’s Cosmere universe. Inspired by the Network of Thrones, this project visualizes the connections between ...", "content": "Adonalsium is a project designed to map the intricate relationships within Brandon Sanderson’s Cosmere universe. Inspired by the Network of Thrones, this project visualizes the connections between characters, locations, and events across the various books and series that make up the Cosmere.Live demoYou can view the current iteration of the web graph here.Project OverviewThese tools aim to provide an interactive and dynamic representation of the complex web of relationships within the expansive Cosmere universe.Key Features Interactive Web Graph frontend: Explore the relationships with a fully interactive graph that allows you to navigate connections in a visually intuitive manner. Open Source data processing: The project is open source, the entire edge and node creation process can be studied in the notebook.How It WorksEach node in the graph represents a character while the edges between nodes signify relationships based on the context of frequency of interactions. The process used is inspired by the network of thrones data process.Technologies Web Graph Visualization: The interactive web graph is built using the Sigma.js. Data Management: The data was algorithmically organized and processed using Gephi.Getting StartedTo explore the graph: Visit the Adonalsium Web Graph. Use the interface to navigate through the relationships, zoom in on specific connections, and filter the data to find interesting relationship patterns.LicenseThis project is licensed under the MIT License." }, { "title": "mtgscan.cards: Fullstack MTG card scanning app", "url": "/posts/mtgcards-scan/", "categories": "", "tags": "", "date": "2025-06-05 06:30:00 +0000", "snippet": "mtgscan.cards is a simple full-stack MTG card scanning website for desktop and mobile. Stack Frontend: Vite + React Backend: Flask (modular, JWT-auth) Database: PostgreSQL (via pg_pool) Deploym...", "content": "mtgscan.cards is a simple full-stack MTG card scanning website for desktop and mobile. Stack Frontend: Vite + React Backend: Flask (modular, JWT-auth) Database: PostgreSQL (via pg_pool) Deployment: Docker Compose, Gunicorn, Static site hosting CI/CD: GitHub Actions + self-hosted runnerSetup1. Clonegit clone https://github.com/mtgscan-cards/monolithic.gitcd monolithic2. Configure Environment VariablesFrontend (/vite-frontend/.env)VITE_HCAPTCHA_SITEKEY=1234-1234-1234-1234VITE_GOOGLE_CLIENT_ID=4321-4321-4321-4321.apps.googleusercontent.comVITE_API_URL=http://localhost:5000VITE_GITHUB_APP_CLIENT_ID=0987654321VITE_FRONTEND_URL=http://localhost:5173Backend (/inference-backend/.env)POSTGRES_USER=dbuserPOSTGRES_PASSWORD=dbpassPOSTGRES_DB=mtgdbPOSTGRES_HOST=mtg-dbPOSTGRES_PORT=5432HCAPTCHA_SECRET=0x0000000000000000000000000000000000000000FAILED_ATTEMPTS_THRESHOLD_BACKOFF=3FAILED_ATTEMPTS_THRESHOLD_BAN=5BACKOFF_DURATION=10BAN_DURATION=300GOOGLE_CLIENT_ID=123456.apps.googleusercontent.comGITHUB_APP_CLIENT_ID=1234567GITHUB_APP_CLIENT_SECRET=1234567FRONTEND_URL=http://localhost:5173REFRESH_TOKEN_EXPIRE_DAYS=30JWT_SECRET=replace-this-with-a-secure-keyFLASK_SECRET_KEY=replace-this-with-a-secure-keyFLASK_ENV=developmentLOG_FILE_PATH=/app/logs/app.logLOG_LEVEL=INFO3. Deploydocker-compose up --buildcd /vite-frontendnpm run dev Backend: http://localhost:5000 Frontend: http://localhost:5173DiagramLICENSEThis project is licensed under the GNU General Public License v3.0.See the LICENSE file for full details." }, { "title": "js13k 2024 Post-Mortem - html/css/js Game Jam", "url": "/posts/js13k-Post-Mortem/", "categories": "", "tags": "", "date": "2024-09-17 06:30:00 +0000", "snippet": "JS13k 2024 Post-MortemIntroductionFirst off I would like to express how deeply I appreciate the opportunity to participate in the JS13k 2024 competition. This event was a lot of fun to participate ...", "content": "JS13k 2024 Post-MortemIntroductionFirst off I would like to express how deeply I appreciate the opportunity to participate in the JS13k 2024 competition. This event was a lot of fun to participate in. I found the process of creating my game alongside so many very, very talented programmers to be such a profoundly important learning experience.My Game Overview: “Z0MB13”My game entry can be played on js13kgames.com.The concept for my JS13k submission was a top-down arcade-style arena shooter, featuring an unending sequence of zombies that increase in speed and difficulty. The core objective was to design a game that not only engages the user with its escalating challenge but also diversifies the gameplay with an array of interesting zombie types. Above all, I wanted to make something that I would’ve played back in the days of flash-based games.Technologies UsedI utilized a fairly simple set of development tools and libraries for adhering to the competition’s size limit: Game Engine: Employed LittleJS for its robust capabilities and lightweight build size. Modules: Leveraged ES6 Modules for efficient script organization and tree-shaking. Build Tools: Integrated Webpack, Terser, Closure Compiler, UglifyJS, and Roadroller to streamline and minimize the final build. Joystick.js: An open source html joystick that I was able to heavily adjust to minify and to meet the two stick at a time requirement for touch devices.These technologies were used to build to the 13KB limitation.Challenges EncounteredThe development journey was marked by several significant challenges: Mobile Compatibility: The decision to implement mobile compatibility introduced complexities in the final stages of development, necessitating the addition of touch controls and a mobile-adaptive interface. Game Difficulty Balance: As the primary playtester, calibrating the game’s difficulty posed a considerable challenge. The goal was to strike a delicate balance between difficulty and enjoyment, a task that required meticulous adjustment and reevaluation to ensure the game remained engaging and accessible.AchievementsI am particularly proud of the modular zombie system developed for the game. This system allowed for the efficient introduction of diverse zombie types, somewhat enhancing the game’s depth and replayability. By extending each zombie type from a foundational class, I significantly streamlined the development process, reducing redundancy and fostering a more agile development environment.Lessons Learned Build Optimization: I gained invaluable insights into the intricate process of minimizing an HTML-based game, utilizing a combination of advanced tools to refine and compress the game’s assets effectively. Compression Techniques: The exploration of various zipping techniques to further reduce the game’s size taught me the critical importance of each byte in such a constrained development environment.Future Directions Early Platform Consideration: Future projects will benefit from an earlier determination of targeted platforms, incorporating necessary features such as touch controls from the project’s inception. Expanded Playtesting: Engaging a broader array of playtesters early in the development process will be crucial in more accurately assessing and adjusting the game’s difficulty curve.ConclusionAfter all is said and done, JS13k was about embracing the constraints of 13KB, learning from every hurdle, and pushing the boundaries with such limited resources. “Z0MB13” was a project that challenged me to think critically, and optimize efficiently. From tackling mobile support to fine-tuning game mechanics, every step was a lesson in balancing ideas and ambition with reality. As I move forward, this experience will for sure guide me to be more intentional regarding the technical intricacies of game/web development. For now, I’m leaving this competition with a great sense of accomplishment and excitement, and I’m highly grateful for the experience. Thank you for putting this game jam together Andrzej!" }, { "title": "Map Pixel - An r/place Fullstack Clone", "url": "/posts/map-pixel-app/", "categories": "", "tags": "", "date": "2024-07-05 15:30:00 +0000", "snippet": "map-pixel-app is a simple full-stack r/place clone that allows users to save pixels on an interactive map.ConfigurationTo self-host this app: CORS Setup:Configure allowed frontend origins in t...", "content": "map-pixel-app is a simple full-stack r/place clone that allows users to save pixels on an interactive map.ConfigurationTo self-host this app: CORS Setup:Configure allowed frontend origins in the backend server. Frontend .env: REACT_APP_BACKEND_URL=https://your-backend-url.com REACT_APP_HCAPTCHA_SITEKEY=your-hcaptcha-site-key Backend Hosting:Ensure the backend API is accessible and CORS-compatible with your frontend origin.DevelopmentInstall dependenciesnpm installStart the development servernpm startRuns the app locally at http://localhost:3000. It hot-reloads on file changes.Build for productionnpm run buildCreates an optimized production build in the build/ folder, suitable for deployment to GitHub Pages or similar.DeploymentThe frontend can be deployed using GitHub Pages or served statically via any HTTP server." }, { "title": "React mp3 downloader for Plexamp", "url": "/posts/mp3-react-app/", "categories": "", "tags": "", "date": "2024-06-15 17:40:00 +0000", "snippet": "mp3-react-app is a full-stack application that allows users to download MP3 files from YouTube links. The application also supports tagging the downloaded MP3 files with metadata (artist, album, tr...", "content": "mp3-react-app is a full-stack application that allows users to download MP3 files from YouTube links. The application also supports tagging the downloaded MP3 files with metadata (artist, album, track name) and organizing the files into a Plex-friendly structure. Additionally, it can acquire and download lyrics from a provided Genius URL.Features Download MP3 files from YouTube links. Tag MP3 files with metadata: artist name, album name, track name. Organize downloaded files in a Plex-friendly structure. Optional lyrics acquisition and downloading from Genius.UsageEnter the YouTube link: Paste the URL of the YouTube video you want to download. Artist Name Album Name Track Name Optional Lyrics: Enter the Genius URL for the lyrics if available. Download: Click the “Download” button to start the process.Output Structure:The downloaded MP3 files will be organized in the following Plex-friendly structure:Artist Name└── Album Name ├── Track Name.mp3 ├── Track Name.txt (optional) └── Track Name.webp (YouTube thumbnail for album cover)DevelopmentInstallationPrerequisites Node.js npm or yarn Python (for the backend) Flask (for the backend) ffmpeg (for YouTube to MP3 conversion) Docker (Optional but recommended for gunicorn deployment)StepsTesting Clone the Repository git clone https://github.com/JakeTurner616/mp3-react-appcd mp3-react-app Install Frontend Dependencies npm install# oryarn install Build and deploy for testing npm run start# start the dev server Install Backend for testing # Create a virtual environment python -m venv venv # Activate the virtual environment # On Windows: venv\\Scripts\\activate # On macOS/Linux: source venv/bin/activate # Install dependencies from requirements.txt pip install -r requirements.txt Run the Backend dev server for testing (don’t forward or proxy this!) python backend.py (requires ffmpeg)# start the flask dev server manually Deployment Build and deploy static site with backend domain set in .env npm run build# build the production assets Install Backend for deployment docker build -t mp3-react-app .docker run -p 50616:50616 mp3-react-app# now we can forward and/or proxy the API backend LicenseThis project is licensed under the GNU GPL 3.0 License. See the LICENSE file for details." }, { "title": "DiscordTorrentManager - Torrent Client", "url": "/posts/DiscordTorrentManager/", "categories": "", "tags": "", "date": "2024-06-12 07:50:00 +0000", "snippet": "DiscordTorrentManager is a Torrenting client for Discord.This program enhances a Discord server by integrating torrent searching and downloading functionalities through the qBittorrent API. 🤯🌟 Inst...", "content": "DiscordTorrentManager is a Torrenting client for Discord.This program enhances a Discord server by integrating torrent searching and downloading functionalities through the qBittorrent API. 🤯🌟 InstallationDocker Installation (Recommended) Clone the repository: git clone https://github.com/JakeTurner616/DiscordTorrentManager cd DiscordTorrentManager Build the Docker image: docker build -t discordtorrentmanager . Run the Docker container: ### Linux/macOS (Bash or Zsh) docker run -d --name discordtorrentmanager -v $(pwd)/config.ini:/app/config.ini discordtorrentmanager ### Windows (PowerShell) docker run -d --name discordtorrentmanager -v ${PWD}/config.ini:/app/config.ini discordtorrentmanager Bare-Metal Installation (Not Recommended) Clone the repository: git clone https://github.com/JakeTurner616/DiscordTorrentManager cd DiscordTorrentManager Create a virtual environment: python -m venv venv Activate the virtual environment: On Windows: venv\\Scripts\\activate On MacOS and Linux: source venv/bin/activate Install the required packages: pip install -r requirements.txt Running the bot: The Bot can be started by running the start script, Make sure to setup qBittorrent and the values in config.ini. bash ./start.sh If you encounter the following error: ImportError: cannot import name 'Option' from 'discord', resolve it by running these commands: pip uninstall discord -y pip uninstall py-cord -y pip install discord pip install py-cord pip uninstall discord -y ⚙️ qBittorrent Setup Open qBittorrent and go to Tools -&gt; Options. Navigate to the Web UI section under the Web UI tab. Check the Enable the Web User Interface (Remote control) box. Set a network interface to bind the Web UI in the IP Address text box. Set a username and password for the Web UI. Create torrent categories in qBittorrent to associate the downloaded content with the folders they should be saved to (for example: movies –&gt; Z://some/location/movies, and tv –&gt; Z://some/location/tv). These are to be used with /magnet &lt;magnet_link&gt; &lt;category&gt; The category save paths could be set somwhere that has access to a media player like plex, jellyfin, a game folder, or anything really. ⚙️ Discord Bot Setup Go to the Discord Developer Portal and create a new bot application. Create and copy the bot token. Invite the bot to your Discord server using the OAuth2 URL Generator under the OAuth2 tab. Make sure to give the bot the necessary permissions for slash commands, reactions, and text. ⚙️ ConfigurationEdit the config.ini file to include your specific environment settings for connecting to your discord bot and qBittorrent instance:[Bot]# change to your bot tokentoken = YOUR_DISCORD_BOT_TOKEN# change to your server idguild_id = YOUR_DISCORD_GUILD_ID[qbit]# change to your qBittorrent host and port: http://host_ip:port host = http://host_ip:port# qBittorrent WebUI login credentialsuser = YOUR_QBITTORRENT_USERNAMEpass = YOUR_QBITTORRENT_PASSWORDThe bot can then be started by running the ./start.sh script.🤖 Command UsageHere are the commands included with the DiscordTorrentManager bot: Add a Magnet Link: /magnet &lt;magnet&gt; &lt;category&gt; This command adds a new torrent to qBittorrent using the provided magnet link and associates it with the specified category. Search for Torrents: /search &lt;title&gt; This command searches for torrents based on the provided title. The bot will list the results, and the user can select a result to automatically download it to the ‘movie’ category. Assumes the ‘movie’ category exists. " }, { "title": "Pygame Lua Integration: Simplifying Game Development", "url": "/posts/pygame-lua-bindings/", "categories": "", "tags": "", "date": "2024-05-30 06:30:00 +0000", "snippet": "pygame-lua-bindings attempts to map the most useful pygame functions in lua. Houses a neat system for Streamlined access to the pygame mainloop and events. The following demo gives an example on h...", "content": "pygame-lua-bindings attempts to map the most useful pygame functions in lua. Houses a neat system for Streamlined access to the pygame mainloop and events. The following demo gives an example on how simple this is:DemoLua (using pygame to lua bindings):clear_canvas()draw_text(50, 50, \"Hello Pygame from lua!\", \"Arial\", 30, 'red')Compare to vanilla pygame:import pygamepygame.init()screen = pygame.display.set_mode((800, 600))font = pygame.font.SysFont('Arial', 30)red = (124, 0, 0)green = (0, 255, 0)running = Truewhile running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False screen.fill((0, 0, 0)) screen.blit(font.render('Hello Pygame from python!', True, red), (50, 50)) pygame.display.flip()pygame.quit()More in depth examples can be found on the wiki.Main loop handling from within luaAssumes the use of high-level abstractions to register event handlers and inject control functions into the main loop. The following snake game provides a clear visualization of this process start to finish.-- Game constantslocal SCREEN_WIDTH, SCREEN_HEIGHT, TILE_SIZE = 800, 600, 20-- Initialize game statelocal snake = local food = {x = 15, y = 15}local direction = {x = 1, y = 0}local score = 0local input_locked = false -- Lock for input processing-- Draw functionlocal function draw_game() clear_canvas() -- Draw snake for _, s in ipairs(snake) do draw_rectangle(s.x * TILE_SIZE, s.y * TILE_SIZE, TILE_SIZE, TILE_SIZE, \"#00FF00\") end -- Draw food draw_rectangle(food.x * TILE_SIZE, food.y * TILE_SIZE, TILE_SIZE, TILE_SIZE, \"#FF0000\") -- Draw score draw_text(10, SCREEN_HEIGHT - 30, \"Score: \" .. score, \"Arial\", 20, \"#FFFFFF\") flip_display()end-- Event handlingregister_event_handler('on_keydown', function(event) if input_locked then return end -- Ignore inputs if locked local key_map = { [K_RIGHT] = {1, 0}, -- Right arrow [K_LEFT] = {-1, 0}, -- Left arrow [K_UP] = {0, -1}, -- Up arrow [K_DOWN] = {0, 1} -- Down arrow } local dir = key_map[event.key] if dir and (dir[1] ~= -direction.x and dir[2] ~= -direction.y) then direction = {x = dir[1], y = dir[2]} input_locked = true -- Lock input until next update endend)-- Game logicfunction process_events() for _, e in ipairs(get_events()) do if e.type == \"QUIT\" then stop_main_loop() end endendfunction update_position() -- Move snake local head = {x = snake[1].x + direction.x, y = snake[1].y + direction.y} -- Check collision with walls or self if head.x &lt; 0 or head.x &gt;= SCREEN_WIDTH / TILE_SIZE or head.y &lt; 0 or head.y &gt;= SCREEN_HEIGHT / TILE_SIZE or (#snake &gt;= 4 and (function() for _, s in ipairs(snake) do if s.x == head.x and s.y == head.y then return true end end return false end)()) then stop_main_loop() end -- Move snake table.insert(snake, 1, head) -- Check for food collision if head.x == food.x and head.y == food.y then score = score + 1 food = {x = math.random(0, SCREEN_WIDTH / TILE_SIZE - 1), y = math.random(0, SCREEN_HEIGHT / TILE_SIZE - 1)} else table.remove(snake) end input_locked = false -- Unlock input after updatingend-- Register functions and start the loopregister_function(\"process_events\", process_events)register_function(\"update_position\", update_position)register_function(\"draw\", draw_game)start_main_loop()Bound methodsAll bound methods and their usage can be found on the wiki page. This project is just for fun, not to re-invent the wheel." }, { "title": "Infinity Library - Book Downloader", "url": "/posts/Infinity-Library/", "categories": "", "tags": "", "date": "2024-02-21 06:30:00 +0000", "snippet": "Infinity Library is a reliable, lightweight and fast desktop client for Library Genisis written in Java. Works on PC, Mac, and Linux. OS Version Details Bundled JRE ...", "content": "Infinity Library is a reliable, lightweight and fast desktop client for Library Genisis written in Java. Works on PC, Mac, and Linux. OS Version Details Bundled JRE v1.1.1 Windows setup ✔️ Temurin v1.1.1 tar.gz / zip ❌ None Using Infinity Library to search for books and mirrors: Features 🌟 🔍 Search and download books from libgen.li and library.lol. 📖 Displays the list of mirrors for any given book across annas-archive.org, library.lol or any other libgen.li supported mirror. 🌐 Allows for filtering against any language and/or any media type. 📚 Fetches book details, covers, and direct download URLs across multiple mirrors all in one place. 💾 Directly download from the libgen.li or library.lol mirror to a selected local location. 🚀 Multi-threaded downloading logic allows for downloading more than one book simultaneously without blocking the UI. 🔢 Pagination allows for in-depth searching of results. 🎨 Uses Java Swing (jswing) and Jsoup for graphics and web scraping, respectively.License 📜This project is licensed under the GNU GPL v3.0 License - see the LICENSE file for details." }, { "title": "Real Art AI - AI art application", "url": "/posts/Real-Art-AI/", "categories": "", "tags": "", "date": "2023-05-02 06:30:00 +0000", "snippet": "Real Art AI is a full-stack generative art platform built with Dart (Flutter) and Python. It allows users to generate custom digital art using Stable Diffusion with full parameter control.Supports ...", "content": "Real Art AI is a full-stack generative art platform built with Dart (Flutter) and Python. It allows users to generate custom digital art using Stable Diffusion with full parameter control.Supports both iOS and Android, with features including: Text-to-image (txt2img) Image-to-image (img2img) Inpainting / Outpainting Upscaling Prompt auto-suggestionsStack Component Description [Stable Diffusion UI] Custom A1111 web UI for local image generation [Load Balancer] Load-balanced execution of multiple inference backends [Backend API] Python Flask interface for mobile clients [Prompt Generator] Autocomplete-style prompt enrichment for creativity [NSFW Filter] Automatic filtering of unsafe images before returning to clients Repositories Stable Diffusion Web UI Load Balancer Backend API Prompt Generator NSFW FilterLicenseThis project is licensed under the GNU General Public License v3.0.See the LICENSE file for details." }, { "title": "Discord-notify-bot - Ultimate Discord notfication bot", "url": "/posts/Discord-notify-bot/", "categories": "", "tags": "", "date": "2023-04-23 06:30:00 +0000", "snippet": "Discord-notify-bot is a Discord bot that sends notifications at any number of specified times and can also send a message to a text channel when a user joins a specified voice channel.Bot setupYou ...", "content": "Discord-notify-bot is a Discord bot that sends notifications at any number of specified times and can also send a message to a text channel when a user joins a specified voice channel.Bot setupYou need a bot token and to invite your bot with valid permissions from the discord developer portal. You also need the role name, role ID, vc ID, and tc ID in your server so that the bot knows what to monitor and where / whom to send messages.Installation Clone the repository: git clone https://github.com/JakeTurner616/discord-notify Install the required packages: pip install -r requirements.txt Edit config.ini and fill in all values with the required information. Run the bot: python bot.pyUsageOnce the bot is running, it will automatically send notifications at the specified times to the specified text channel, and will send a DM to everyone given a specified role when a user joins the specified voice channel.LicenseThis project is licensed under the GNU/GPL license - see the LICENSE file for details." }, { "title": "Load balance Stable Diffusion GPU/CPU Cluster", "url": "/posts/sd-loadbalance/", "categories": "", "tags": "", "date": "2023-04-01 06:30:00 +0000", "snippet": "The following documents a nginx web server configuration file for Stable Diffusion WebUI request routingConfiguration DetailsThe Nginx configuration file contains the following directives: upstrea...", "content": "The following documents a nginx web server configuration file for Stable Diffusion WebUI request routingConfiguration DetailsThe Nginx configuration file contains the following directives: upstream: Defines a group of servers to be load balanced. server: Lists the IP addresses and port numbers of the servers to be included in the group. listen: Specifies the port number and IP address to listen on. location: Defines the URL path to be proxied to the upstream servers. proxy_pass: Specifies the upstream group to be used for load balancing. proxy_set_header: Sets the HTTP headers to be sent to the upstream servers.UsageUse within docker is quite simple. See the example dockerfile.For baremetal simply install nginx and paste the contents of the configuration - restart Nginx.After the configuration is applied, Nginx will load balance incoming requests between the two applications running on localhost:7860 and localhost:7861." }, { "title": "reboot-to-uefi - A simple batch / bash file to act as a clone of ASROCK restart to UEFI", "url": "/posts/reboot-to-uefi/", "categories": "", "tags": "", "date": "2022-10-06 06:30:00 +0000", "snippet": "Usage (Windows):One liner to download and execute (cmd running as administrator):curl -sS https://raw.githubusercontent.com/JakeTurner616/reboot-to-bios/main/reboot-to-bios.bat &gt; reboot-to-bios....", "content": "Usage (Windows):One liner to download and execute (cmd running as administrator):curl -sS https://raw.githubusercontent.com/JakeTurner616/reboot-to-bios/main/reboot-to-bios.bat &gt; reboot-to-bios.bat &amp;&amp; cmd /C reboot-to-bios.batOr clone/copy contents of reboot-to-bios.bat into a file with a .bat file extension, then run it as administrator.Usage (Most Linux OS’s):One liner to download and execute (privledged shell):wget https://raw.github.com/JakeTurner616/reboot-to-bios/main/reboot-to-bios.sh -O - | bashOr clone/copy contents of reboot-to-bios.sh into a file with a .sh file extension, then run it as a privledged user.Limitations:Script must be ran as privledged user - Will return an error otherwise.Might not work for certian motherboards with fast-boot / ultra-fast-boot on Windows.Might not work with some configurations of Windows fast-startup.Uses systemctl only on Linux as of now - Requires systemd as init system.Future ideas: Update Linux version to detect the active init system being used as to support more distros." }, { "title": "Fitgirl magnet list", "url": "/posts/FitGirl-Repack-List/", "categories": "", "tags": "", "date": "2022-10-06 06:30:00 +0000", "snippet": "Usagepython magnets.py &gt; out.txtOutputLink: https://fitgirl-repacks.site/chinese-paladin-sword-and-fairy-7/Title: (Chinese Paladin): Sword and Fairy 7 ΓÇô v2.0.1Magnet: magnet:?xt=urn:btih:7C2F3...", "content": "Usagepython magnets.py &gt; out.txtOutputLink: https://fitgirl-repacks.site/chinese-paladin-sword-and-fairy-7/Title: (Chinese Paladin): Sword and Fairy 7 ΓÇô v2.0.1Magnet: magnet:?xt=urn:btih:7C2F38F573260C976F132711CECB60970DCFCC79&amp;dn=Sword+and+Fairy+7+%28v2.0.1%2C+MULTi4%29+%5BFitGirl+Repack%5D&amp;tr=udp%3A%2F%2Fopentor.net%3A6969&amp;tr=udp%3A%2F%2Fopentor.org%3A2710&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=http%3A%2F%2Ftracker.dler.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fipv4.tracker.harry.lu%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fretracker.lanta-net.ru%3A2710%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.cyberia.is%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.moeking.me%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.tiny-vps.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=http%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fopentracker.i2p.rocks%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.internetwarriors.net%3A1337%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fcoppersurfer.tk%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.zer0day.to%3A1337%2Fannounce--------------------Link: https://fitgirl-repacks.site/hackg-u-last-recode/Title: .hack//G.U. Last RecodeMagnet: magnet:?xt=urn:btih:864504C72DEDED6E62F9FBEAB00436802D15D0D2--------------------Link: https://fitgirl-repacks.site/100-percent-orange-juice/Title: 100% Orange Juice: All Stars Collection ΓÇô v3.7 + 31 DLCsMagnet: magnet:?xt=urn:btih:B7C892EAECD7E39B769DA7138E5DCE957ACF197C&amp;dn=100%25+Orange+Juice%3A+All+Stars+Collection+%28v3.7+%2B+31+DLCs%2C+MULTi9%29+%5BFitGirl+Repack%5D&amp;tr=udp%3A%2F%2F46.148.18.250%3A2710&amp;tr=udp%3A%2F%2Fopentor.org%3A2710&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&amp;tr=http%3A%2F%2Ftracker.dler.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.me%3A2730%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.to%3A2770%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.pirateparty.gr%3A6969%2Fannounce&amp;tr=http%3A%2F%2Fretracker.local%2Fannounce&amp;tr=http%3A%2F%2Fretracker.ip.ncnet.ru%2Fannounce&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fipv4.tracker.harry.lu%3A80%2Fannounce&amp;tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.zer0day.to%3A1337%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fcoppersurfer.tk%3A6969%2Fannounce" }, { "title": "Autowgc.sh - CLI only WireGuard Client for VPN Automation and Integration", "url": "/posts/Autowgc-sh/", "categories": "", "tags": "", "date": "2022-08-08 06:30:00 +0000", "snippet": "Autowgc.sh is a wireguard client for linux written in bash/shell for automation of wireguard tunnels within a linux system. Allows for simple to advanced virtual networking setups to be created, ca...", "content": "Autowgc.sh is a wireguard client for linux written in bash/shell for automation of wireguard tunnels within a linux system. Allows for simple to advanced virtual networking setups to be created, called and then executed automatically.Download:sudo wget -qO - api.serverboi.org &gt; ~/autowgc.shExecute:sudo bash ~/autowgc.shSyntax: sudo bash ~/autowgc\t [ \t-h -a &lt;file&gt; -s \t ] flags:-a &lt;file&gt; Add a wireguard client config file or ommit the &lt;file&gt; to start an already added connection. &lt;file&gt; Should be the location of a valid wireguard config. &gt; EXAMPLE: sudo ~/autowgc -a ~/Wireguard.conf-s \tStop the wireguard VPN.-h \tShows command syntax and other info.Source: #!/bin/bashif (( EUID != 0 )); then echo \"Error: Must be ran as root user\" 1&gt;&amp;2 exit 100fiWG=$(wg)while getopts \":ahs\" option; do case $option in a) ;; h) echo -e \"autowgc (Auto wireguard client) - allows for easy managment of a wireguard connection.\" echo echo \"Syntax: ./autowgc [-h |-a &lt;file&gt;| -s ]\" echo \"options:\" echo \"-a &lt;file&gt; Add a wireguard client config file or ommit the &lt;file&gt; to start an already added connection.\" echo \"-s Stop the wireguard VPN.\" echo \"-h Shows command syntax and other info.\" echo exit;; s) if [ -z \"$WG\" ]thenecho \"Error: nothing to do: no active connection\" &amp;&amp; exitelsesystemctl stop wg-quick@wg0.service &amp;&amp; echo -e \"Stopped!\" &amp;&amp; exit 0fi### ;; \\?) echo \"Error: Invalid or unreconized option\" exit;; esacdoneif [ -z \"$1\" ]then echo \"Error: nothing to do: no flags used\" ; exitelse :fiif [ -z \"$2\" ]then :else cp -r $2 /etc/wireguard/wg0.conf fiCONFIG=/etc/wireguard/wg0.confif [ -f \"$CONFIG\" ]; then :else echo \"Error: $CONFIG does not exist.\" &amp;&amp; exit 0fi###############################echo \"Starting connection!\"###############################os_version=$(lsb_release -r |cut -f2)localnetint=$(ip addr | awk '/state UP/ {print $2}'| tr -d ':' | tail -1)if [ \"$os_version\" = \"18.04\" ]; then add-apt-repository universe 2&gt;/dev/nullelse:fiUFW=$(ufw status verbose)if [ \"$UFW\" = \"Status: active\" ]; then ufw route allow in on wg0 out on $localnetint|head -n 1 ufw route allow in on $localnetint|head -n 1 out on wg0else:fispinner(){ local pid=$! local delay=0.75 local spinstr='|/-\\' while [ \"$(ps a | awk '{print $1}' | grep $pid)\" ]; do local temp=${spinstr#?} printf \" [%c] \" \"$spinstr\" local spinstr=$temp${spinstr%\"$temp\"} sleep $delay printf \"\\b\\b\\b\\b\\b\\b\" done printf \" \\b\\b\\b\\b\"}(apt-get update &gt; /dev/null &amp;&amp; apt-get install openresolv -y &gt; /dev/nulll &amp;&amp; apt-get install wireguard -y &gt; /dev/null &amp;&amp; apt-get upgrade &gt; /dev/null &amp;&amp; wait &amp;&amp; cd /etc/wireguard ; umask 077 &amp;&amp; wg genkey &gt; private-key &amp;&amp; wg pubkey &gt; public-key &lt; private-key) &amp;spinner###systemctl start wg-quick@wg0.service 2&gt;/dev/null if [ $? -eq 0 ]; then echo -e \"Started:$(systemctl status wg-quick@wg0.service | grep SUCCESS | head -1)\" else echo -e \"Error: $(sudo journalctl -xe | grep \"wg-quick@wg0.service has finished with a failure\" | tail -1)\"\tsystemctl status wg-quick@wg0.service | grep \"Main process exited, code=exited, status=1/FAILURE\"fiexit 0 Edit this page’s markdown on github." } ]
